#
# SPDX-License-Identifier: AGPL-3.0-or-later
# Copyright (C) 2025 Association Française du Poêle Maçonné Artisanal
#

name: Build and Release (Staging)

on:
  push:
    tags:
      - 'electron-v*-staging*'  # Triggers on Electron app staging tags like electron-v0.9.0-b6-staging, electron-v0.9.0-b6-staging.1, etc.

permissions:
  contents: write
  discussions: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  create-release:
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create Draft Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }} (Staging - Electron Desktop App)
          draft: true  # Private until manually published
          prerelease: true  # Mark as pre-release
          generate_release_notes: true
          body: |
            ## Electron Desktop App - Staging Release
            
            This is a staging release for the **Electron desktop application** module.
            
            **Module**: Electron Desktop App
            **Version**: ${{ github.ref_name }}
            **Environment**: Staging
            **Status**: Draft (Private)
            
            ### Platform Builds
            - ✅ macOS DMG
            - ✅ Windows NSIS Installer
            - ✅ Linux AppImage
            
            ### Testing
            Download the appropriate artifact for your platform to test before publishing.
            
            ---
            *This release is part of the FireCalc monorepo. For other modules, see tags with different prefixes (e.g., `payments-v*`, `ui-v*`).*

  build:
    needs: create-release
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        include:
          - os: windows-latest
            platform: windows
            make_target: staging-electron-package-win
          # TODO: Re-enable Linux and macOS once Windows build is stable
          # - os: ubuntu-latest
          #   platform: linux
          #   make_target: staging-electron-package-linux
          # - os: macos-latest
          #   platform: mac
          #   make_target: staging-electron-package-mac
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            web/package-lock.json
            modules/ui/package-lock.json
          
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'sbt'
          
      - name: Setup sbt (Ubuntu/macOS)
        if: runner.os != 'Windows'
        run: |
          curl -fL https://github.com/sbt/sbt/releases/download/v1.11.6/sbt-1.11.6.tgz | tar xzf -
          echo "$GITHUB_WORKSPACE/sbt/bin" >> $GITHUB_PATH
          
      - name: Configure JVM for CI (reduce memory usage)
        if: runner.os != 'Windows'
        run: cp .jvmopts.ci .jvmopts
          
      - name: Setup sbt (Windows)
        if: runner.os == 'Windows'
        run: choco install sbt
        
      - name: Configure JVM for CI (reduce memory usage)
        if: runner.os == 'Windows'
        run: Copy-Item .jvmopts.ci .jvmopts

      - name: Workaround Windows Coursier file-locks
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          echo "COURSIER_CACHE=${{ github.workspace }}\.coursier" >> $env:GITHUB_ENV
          echo "COURSIER_MAX_THREADS=1" >> $env:GITHUB_ENV
          echo "SBT_OPTS=-Dsbt.coursier=true -Dsbt.coursier.parallel-downloads=1 -Dsbt.global.base=${{ github.workspace }}\.sbt-global -Dsbt.boot.directory=${{ github.workspace }}\.sbt-boot -Dsbt.ivy.home=${{ github.workspace }}\.ivy2" >> $env:GITHUB_ENV

      - name: Disable ST Zinc hack only (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          echo "FIRECALC_CI_NO_ST_HACK=1" >> $env:GITHUB_ENV
          # keep Coursier enabled; serialization flags already set above
          echo "SBT_OPTS=$env:SBT_OPTS -Dsbt.log.noformat=true" >> $env:GITHUB_ENV
      
      - name: Cache Coursier/Ivy/SBT (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}\.coursier
            ${{ github.workspace }}\.ivy2
            ${{ github.workspace }}\.sbt-boot
            ${{ github.workspace }}\.sbt-global
          key: windows-coursier-${{ hashFiles('**/build.sbt', 'project/**', 'project/*.sbt', 'project/**/*.sbt', 'project/build.properties', 'project/plugins.sbt') }}
          restore-keys: |
            windows-coursier-

      - name: Install coursier CLI and prefetch Scala compiler (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $url = "https://github.com/coursier/launchers/raw/master/cs-x86_64-pc-win32.exe"
          $cs = Join-Path $env:RUNNER_TEMP "cs.exe"
          Invoke-WebRequest -Uri $url -OutFile $cs
          # Prefetch scala3-compiler into our isolated cache to avoid lock contention during sbt/plugin resolve
          & $cs fetch org.scala-lang:scala3-compiler_3:3.7.3 --cache "$env:GITHUB_WORKSPACE\.coursier"

      - name: Install UI dependencies
        run: make ui-setup
        
      - name: Install Electron dependencies
        run: make electron-setup
      
      - name: Sync build configuration
        run: make sync-build-config
      
      - name: Build Electron App (Windows)
        if: matrix.platform == 'windows'
        run: make staging-electron-package-win
        
      - name: Upload artifacts to release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: |
            web/electron-app/dist/*.AppImage
            web/electron-app/dist/*.exe
            web/electron-app/dist/*.dmg
            web/electron-app/dist/*.zip
            web/electron-app/dist/latest*.yml