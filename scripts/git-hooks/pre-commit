#!/bin/bash
# SPDX-License-Identifier: AGPL-3.0-or-later
# Copyright (C) 2025 Association Française du Poêle Maçonné Artisanal
#
# Pre-commit hook to check for AGPL-3.0-or-later license headers

set -e

REQUIRED_SPDX="SPDX-License-Identifier: AGPL-3.0-or-later"
REQUIRED_COPYRIGHT="Copyright (C) 2025 Association Française du Poêle Maçonné Artisanal"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Arrays to track files
declare -a MISSING_HEADERS=()
declare -a CHECKED_FILES=()

# Function to check if path matches exclude patterns
should_exclude() {
    local file="$1"
    
    # Exclude patterns from psi-header.changes-tracking.excludeGlob
    [[ "$file" == *"/node_modules/"* ]] && return 0
    [[ "$file" == *"/target/"* ]] && return 0
    [[ "$file" == *"/project/target/"* ]] && return 0
    [[ "$file" == *"/project/project/"* ]] && return 0
    [[ "$file" == *"/dist/"* ]] && return 0
    [[ "$file" == *"/build/"* ]] && return 0
    [[ "$file" == *"/out/"* ]] && return 0
    [[ "$file" == *"/.git/"* ]] && return 0
    [[ "$file" == *"/moleculeGen/"* ]] && return 0
    [[ "$file" == *"/databases/"* ]] && return 0
    [[ "$file" == *"/public/assets/"* ]] && return 0
    [[ "$file" == *".min."* ]] && return 0
    [[ "$file" == *".lock" ]] && return 0
    [[ "$file" == *"yarn.lock" ]] && return 0
    [[ "$file" == *"pnpm-lock.yaml" ]] && return 0
    [[ "$file" == *"package-lock.json" ]] && return 0
    [[ "$file" == *".svg" ]] && return 0
    [[ "$file" == *".png" ]] && return 0
    [[ "$file" == *".jpg" ]] && return 0
    [[ "$file" == *".jpeg" ]] && return 0
    [[ "$file" == *".gif" ]] && return 0
    [[ "$file" == *".ico" ]] && return 0
    [[ "$file" == *".pdf" ]] && return 0
    [[ "$file" == *".vscode/settings.json" ]] && return 0
    
    return 1
}

# Function to check C-style comment headers (/* ... */)
check_c_style_header() {
    local file="$1"
    if ! head -n 5 "$file" | grep -q "$REQUIRED_SPDX"; then
        return 1
    fi
    return 0
}

# Function to check hash comment headers (# ...)
check_hash_header() {
    local file="$1"
    if ! head -n 5 "$file" | grep -q "$REQUIRED_SPDX"; then
        return 1
    fi
    return 0
}

# Function to check SQL comment headers (-- ...)
check_sql_header() {
    local file="$1"
    if ! head -n 5 "$file" | grep -q "$REQUIRED_SPDX"; then
        return 1
    fi
    return 0
}

# Function to check HTML/XML comment headers (<!-- ... -->)
check_html_header() {
    local file="$1"
    if ! head -n 5 "$file" | grep -q "$REQUIRED_SPDX"; then
        return 1
    fi
    return 0
}

# Function to check double-slash comment headers (// ...)
check_double_slash_header() {
    local file="$1"
    if ! head -n 5 "$file" | grep -q "$REQUIRED_SPDX"; then
        return 1
    fi
    return 0
}

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    echo -e "${GREEN}✓${NC} No files to check"
    exit 0
fi

# Check each staged file
while IFS= read -r file; do
    # Skip if file doesn't exist (could be deleted)
    [ ! -f "$file" ] && continue
    
    # Skip excluded paths
    should_exclude "$file" && continue
    
    # Get file extension
    extension="${file##*.}"
    
    # Check based on file extension
    case "$extension" in
        # Excluded file types (from psi-header.changes-tracking.exclude)
        json|jsonc|yaml|yml|md|html|xml)
            # These files are explicitly excluded from license header requirements
            continue
            ;;
            
        # C-style comments: Scala, JavaScript, TypeScript, SBT, CSS
        scala|js|ts|jsx|tsx|sbt|css)
            CHECKED_FILES+=("$file")
            if ! check_c_style_header "$file"; then
                MISSING_HEADERS+=("$file")
            fi
            ;;
            
        # Hash comments: Shell scripts, HOCON, Properties, Makefile
        sh|conf|hocon|properties|mk)
            CHECKED_FILES+=("$file")
            if ! check_hash_header "$file"; then
                MISSING_HEADERS+=("$file")
            fi
            ;;
            
        # SQL comments
        sql)
            CHECKED_FILES+=("$file")
            if ! check_sql_header "$file"; then
                MISSING_HEADERS+=("$file")
            fi
            ;;
            
        # Double-slash comments: Typst
        typ)
            CHECKED_FILES+=("$file")
            if ! check_double_slash_header "$file"; then
                MISSING_HEADERS+=("$file")
            fi
            ;;
            
        # Special case: Makefile (no extension)
        *)
            if [[ "$file" == *"Makefile"* ]] || [[ "$file" == *"makefile"* ]]; then
                CHECKED_FILES+=("$file")
                if ! check_hash_header "$file"; then
                    MISSING_HEADERS+=("$file")
                fi
            fi
            ;;
    esac
done <<< "$STAGED_FILES"

# Report results
if [ ${#MISSING_HEADERS[@]} -gt 0 ]; then
    echo -e "${RED}✗ ERROR: Missing license headers in ${#MISSING_HEADERS[@]} file(s):${NC}"
    printf '   %s\n' "${MISSING_HEADERS[@]}"
    echo ""
    echo -e "${YELLOW}Required header format examples:${NC}"
    echo ""
    echo "For Scala/JS/TS/CSS files:"
    echo "/*"
    echo " * SPDX-License-Identifier: AGPL-3.0-or-later"
    echo " * Copyright (C) 2025 Association Française du Poêle Maçonné Artisanal"
    echo " */"
    echo ""
    echo "For Shell/Config files:"
    echo "# SPDX-License-Identifier: AGPL-3.0-or-later"
    echo "# Copyright (C) 2025 Association Française du Poêle Maçonné Artisanal"
    echo ""
    echo "For SQL files:"
    echo "-- SPDX-License-Identifier: AGPL-3.0-or-later"
    echo "-- Copyright (C) 2025 Association Française du Poêle Maçonné Artisanal"
    echo ""
    echo "For Typst files:"
    echo "// SPDX-License-Identifier: AGPL-3.0-or-later"
    echo "// Copyright (C) 2025 Association Française du Poêle Maçonné Artisanal"
    echo ""
    echo -e "See ${YELLOW}LICENSE-HEADER-TEMPLATE.txt${NC} for all templates"
    echo ""
    echo "To bypass this check (not recommended):"
    echo "  git commit --no-verify"
    exit 1
fi

if [ ${#CHECKED_FILES[@]} -gt 0 ]; then
    echo -e "${GREEN}✓ License header check passed${NC} (${#CHECKED_FILES[@]} files checked)"
else
    echo -e "${YELLOW}⚠${NC} No source files found to check"
fi

exit 0