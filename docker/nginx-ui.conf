#
# SPDX-License-Identifier: AGPL-3.0-or-later
# Copyright (C) 2025 Association Française du Poêle Maçonné Artisanal
#

# =============================================================================
# FireCalc Multi-Domain Nginx Configuration
# =============================================================================
# This configuration handles TWO separate domains:
# 1. UI_DOMAIN (e.g., staging.firecalc.example.com)
#    - Serves ONLY UI static files
# 2. API_DOMAIN (e.g., api.staging.firecalc.example.com)
#    - Proxies ALL requests to backend:8181
#
# Architecture:
# - UI makes cross-origin API calls to API_DOMAIN (backend handles CORS)
# - External clients use API_DOMAIN for direct API access
# - Separate domains for clear separation of concerns
#
# Environment Variables (from docker-compose.yml):
# - UI_DOMAIN: Domain for UI serving (e.g., staging.firecalc.example.com)
# - API_DOMAIN: Domain for API access (e.g., api.staging.firecalc.example.com)
#
# Cache Strategy (from WEB_DEPLOYMENT_CACHE_AND_STATE.md):
# - index.html: no-cache, no-store (always fresh)
# - JS bundles: max-age=300, must-revalidate (5 min)
# - Assets (CSS/images/fonts): max-age=31536000, immutable (1 year)
# =============================================================================

# =============================================================================
# Server Block 1: UI Domain (staging.firecalc.example.com)
# =============================================================================
# Serves ONLY the FireCalc UI static files

server {
    listen 443 ssl http2;
    server_name ${UI_DOMAIN};

    # SSL configuration handled by nginx-ssl-proxy
    # Certificates auto-generated via Let's Encrypt

    # Root directory for static UI files
    root /usr/share/nginx/html;
    index index.html;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # Content Security Policy
    # Allow cross-origin API calls to API_DOMAIN
    add_header Content-Security-Policy "default-src 'self'; connect-src 'self' https://${API_DOMAIN} https://raw.githubusercontent.com; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; font-src 'self' data:; img-src 'self' file: data: blob:;" always;

    # =========================================================================
    # Static File Serving - Cache Strategy
    # =========================================================================

    # index.html: NEVER cache (always check for new version)
    location = /index.html {
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
        etag off;
        if_modified_since off;

        try_files $uri =404;
    }

    # JavaScript bundles: Short cache with validation (5 minutes)
    location ~* \.(js|mjs)$ {
        add_header Cache-Control "public, max-age=300, must-revalidate" always;
        etag on;
        try_files $uri =404;
    }

    # CSS, fonts, images: Long-term cache (2 weeks)
    location ~* \.(css|woff|woff2|ttf|otf|eot|svg|png|jpg|jpeg|gif|ico|webp)$ {
        add_header Cache-Control "public, max-age=1209600, immutable" always;
        etag on;
        try_files $uri =404;
    }

    # Source maps: Don't cache (development only)
    location ~* \.map$ {
        add_header Cache-Control "no-store" always;
        try_files $uri =404;
    }

    # version.json: Never cache (used for update detection)
    location = /version.json {
        add_header Cache-Control "no-store, no-cache, must-revalidate" always;
        add_header Access-Control-Allow-Origin "*" always;
        etag off;
        if_modified_since off;
        try_files $uri =404;
    }

    # All other files: Short cache with revalidation (1 hour)
    # This is the catch-all for static files
    location / {
        add_header Cache-Control "public, max-age=3600, must-revalidate" always;
        etag on;

        # SPA fallback: serve index.html for any non-file routes
        try_files $uri $uri/ /index.html;
    }

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/rss+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        image/svg+xml;
    gzip_disable "msie6";

    # Don't leak nginx version
    server_tokens off;
}

# =============================================================================
# Server Block 2: API Domain (api.staging.firecalc.example.com)
# =============================================================================
# Proxies ALL requests to the backend service

server {
    listen 443 ssl http2;
    server_name ${API_DOMAIN};

    # SSL configuration handled by nginx-ssl-proxy
    # Certificates auto-generated via Let's Encrypt

    # Security headers (more restrictive for API)
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # Content Security Policy for API (strict)
    add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';" always;

    # =========================================================================
    # API Proxy Configuration
    # =========================================================================
    # Proxy ALL requests to the backend service

    location / {
        proxy_pass http://backend:8181;
        proxy_http_version 1.1;

        # Preserve original request information
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Timeout settings
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;

        # Don't cache API responses
        add_header Cache-Control "no-store, no-cache, must-revalidate" always;
    }

    # Don't leak nginx version
    server_tokens off;
}

# =============================================================================
# HTTP to HTTPS Redirects
# =============================================================================
# Redirect all HTTP traffic to HTTPS for both domains

server {
    listen 80;
    server_name ${UI_DOMAIN} ${API_DOMAIN};

    # Redirect to HTTPS
    return 301 https://$server_name$request_uri;
}